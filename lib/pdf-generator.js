import jsPDF from "jspdf"
import html2canvas from "html2canvas"
import { getDashboardData } from "./mock-data"

export const generateDashboardPDF = async (timeRange = "7 Days") => {
  const pdf = new jsPDF("p", "mm", "a4")
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()

  // Get dashboard data
  const dashboardData = getDashboardData(timeRange)

  // PDF Header
  pdf.setFontSize(24)
  pdf.setTextColor(31, 41, 55) // text-primary color
  pdf.text("WealthDash Financial Report", 20, 25)

  pdf.setFontSize(12)
  pdf.setTextColor(107, 114, 128) // text-muted-foreground
  pdf.text(`Report Period: ${timeRange}`, 20, 35)
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 42)

  // Draw separator line
  pdf.setDrawColor(229, 231, 235) // border color
  pdf.line(20, 50, pageWidth - 20, 50)

  let yPosition = 65

  // AUM and SIP Section
  pdf.setFontSize(16)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Key Performance Indicators", 20, yPosition)
  yPosition += 15

  // AUM Card
  pdf.setFontSize(14)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Assets Under Management (AUM)", 20, yPosition)
  yPosition += 8

  pdf.setFontSize(20)
  pdf.text(`₹${dashboardData.aum.value.toLocaleString()}`, 20, yPosition)

  pdf.setFontSize(12)
  const aumChangeColor = dashboardData.aum.isPositive ? [16, 185, 129] : [239, 68, 68]
  pdf.setTextColor(...aumChangeColor)
  pdf.text(`${dashboardData.aum.change} MoM`, 120, yPosition)
  yPosition += 15

  // SIP Card
  pdf.setFontSize(14)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Systematic Investment Plan (SIP)", 20, yPosition)
  yPosition += 8

  pdf.setFontSize(20)
  pdf.text(`₹${dashboardData.sip.value.toLocaleString()}`, 20, yPosition)

  pdf.setFontSize(12)
  const sipChangeColor = dashboardData.sip.isPositive ? [16, 185, 129] : [239, 68, 68]
  pdf.setTextColor(...sipChangeColor)
  pdf.text(`${dashboardData.sip.change} MoM`, 120, yPosition)
  yPosition += 25

  // Statistics Section
  pdf.setFontSize(16)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Transaction Statistics", 20, yPosition)
  yPosition += 15

  // Create stats table
  const stats = [
    ["Metric", "Value"],
    ["Purchases", dashboardData.stats.purchases.toLocaleString()],
    ["Redemptions", dashboardData.stats.redemptions.toLocaleString()],
    ["Rejected Transactions", dashboardData.stats.rejectedTransactions.toLocaleString()],
    ["SIP Rejections", dashboardData.stats.sipRejections.toLocaleString()],
    ["New SIP", dashboardData.stats.newSip.toLocaleString()],
  ]

  // Draw table
  const tableStartY = yPosition
  const rowHeight = 8
  const col1Width = 80
  const col2Width = 40

  stats.forEach((row, index) => {
    const currentY = tableStartY + index * rowHeight

    if (index === 0) {
      // Header row
      pdf.setFillColor(241, 245, 249) // bg-muted
      pdf.rect(20, currentY - 5, col1Width + col2Width, rowHeight, "F")
      pdf.setFontSize(12)
      pdf.setTextColor(31, 41, 55)
      pdf.text(row[0], 25, currentY)
      pdf.text(row[1], 25 + col1Width, currentY)
    } else {
      // Data rows
      pdf.setFontSize(11)
      pdf.setTextColor(75, 85, 99)
      pdf.text(row[0], 25, currentY)
      pdf.text(row[1], 25 + col1Width, currentY)
    }

    // Draw row border
    pdf.setDrawColor(229, 231, 235)
    pdf.line(20, currentY + 2, 20 + col1Width + col2Width, currentY + 2)
  })

  yPosition += stats.length * rowHeight + 20

  // Chart Data Summary
  if (yPosition > pageHeight - 60) {
    pdf.addPage()
    yPosition = 25
  }

  pdf.setFontSize(16)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Chart Data Summary", 20, yPosition)
  yPosition += 15

  // Client Distribution Summary
  pdf.setFontSize(14)
  pdf.text("Client Distribution", 20, yPosition)
  yPosition += 10

  const clientSegments = [
    "High Net Worth: 45 clients, ₹8.5L AUM",
    "Retail Investors: 320 clients, ₹4.5L AUM",
    "Corporate: 25 clients, ₹12L AUM",
    "Institutional: 12 clients, ₹21L AUM",
  ]

  pdf.setFontSize(10)
  pdf.setTextColor(75, 85, 99)
  clientSegments.forEach((segment) => {
    pdf.text(`• ${segment}`, 25, yPosition)
    yPosition += 6
  })

  yPosition += 10

  // Monthly Performance Summary
  pdf.setFontSize(14)
  pdf.setTextColor(31, 41, 55)
  pdf.text("Recent Performance Trends", 20, yPosition)
  yPosition += 10

  const performanceData = [
    "Revenue Growth: +15.2% over selected period",
    "Client Acquisition: +12.8% new clients",
    "AUM Growth: +18.5% portfolio expansion",
    "SIP Adoption: +22.3% new SIP registrations",
  ]

  pdf.setFontSize(10)
  pdf.setTextColor(75, 85, 99)
  performanceData.forEach((data) => {
    pdf.text(`• ${data}`, 25, yPosition)
    yPosition += 6
  })

  // Footer
  pdf.setFontSize(8)
  pdf.setTextColor(156, 163, 175)
  pdf.text("Generated by WealthDash Financial Dashboard", 20, pageHeight - 15)
  pdf.text(`Report Date: ${new Date().toLocaleString()}`, pageWidth - 80, pageHeight - 15)

  // Save the PDF
  pdf.save(`WealthDash-Report-${timeRange.replace(" ", "")}-${new Date().toISOString().split("T")[0]}.pdf`)
}

// Alternative method using HTML to Canvas for visual charts
export const generateVisualPDF = async (timeRange = "7 Days") => {
  const pdf = new jsPDF("p", "mm", "a4")

  try {
    // Capture the main dashboard content
    const dashboardElement = document.querySelector("main")
    if (dashboardElement) {
      const canvas = await html2canvas(dashboardElement, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: "#ffffff",
      })

      const imgData = canvas.toDataURL("image/png")
      const imgWidth = 190
      const imgHeight = (canvas.height * imgWidth) / canvas.width

      // Add header
      pdf.setFontSize(20)
      pdf.setTextColor(31, 41, 55)
      pdf.text("WealthDash Financial Dashboard", 20, 20)

      pdf.setFontSize(12)
      pdf.text(`Period: ${timeRange} | Generated: ${new Date().toLocaleDateString()}`, 20, 30)

      // Add the dashboard image
      pdf.addImage(imgData, "PNG", 10, 40, imgWidth, Math.min(imgHeight, 200))

      // Add additional pages if content is too long
      if (imgHeight > 200) {
        pdf.addPage()
        pdf.addImage(imgData, "PNG", 10, 20, imgWidth, imgHeight - 200, 0, -200)
      }
    }

    pdf.save(`WealthDash-Visual-Report-${timeRange.replace(" ", "")}-${new Date().toISOString().split("T")[0]}.pdf`)
  } catch (error) {
    console.error("Error generating visual PDF:", error)
    // Fallback to text-based PDF
    await generateDashboardPDF(timeRange)
  }
}
